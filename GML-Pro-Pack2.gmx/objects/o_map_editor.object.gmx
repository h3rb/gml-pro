<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onionMode=true;
exclusiveMode=false;
autoRotateSub=false;
drawAlpha=1.0;
drawColor=c_white;
drawLight=0;
drawCode=0;
drawBlend=bm_normal;
drawObject=-1;
drawTween=0;
ax=0;
ay=0;
ox=0;
oy=0;
maxw=170;
maxh=170;
maxx=170*64;
maxy=170*64;
layer_=5;
new_map(0,maxw,maxh); // distance bg
new_map(1,maxw,maxh); // closer bg
new_map(2,maxw,maxh); // closest bg
new_map(3,maxw,maxh); // near bg 2 
new_map(4,maxw,maxh); // near bg 1
new_map(5,maxw,maxh); // near
new_map(6,maxw,maxh); // near fg 1
new_map(7,maxw,maxh); // near fg 2
new_map(8,maxw,maxh); // closer fg
new_map(9,maxw,maxh); // closest fg
mx=0;
my=0;
sub=0;
mtx=0;
mty=0;
mrx=0;
mry=0;
mtox=0;
mtoy=0;
cursor_sprite=s_cursor;

keyDelay=0.0;

drawTileset=0;
tileset_presets[0]=s_64_sandstone;
tileset_presets[1]=s_64_granite;
tileset_presets[2]=s_64_rustyplate;
tileset_presets[3]=s_64_grimyplate;
tileset_presets[4]=s_64_yellowedplate;
tileset_presets[5]=s_64_sm_broken_stones;
tileset_presets[6]=s_64_dk_paint_metal;
tileset_presets[7]=s_64_brightrust;
tileset_presets[8]=s_64_randomtech;
tileset_presets[9]=s_64_door;
tileset_presets[10]=s_64_decals;
tileset_presets[11]=s_64_fences;
tileset_presets[12]=s_64_chain;
tileset_presets[13]=s_64_ladders;
tileset_presets[14]=s_64_greengrass;
tileset_presets[15]=s_64_mosses;
tileset_presets[16]=s_64_treesticks;
tileset_presets[17]=s_64_tree;
tileset_presets[18]=s_64_purpgrass;
tileset_presets[19]=s_64_otworld;
tileset_presets[20]=s_64_dryvy;
maxTilesets=21;

blendPreset=0;
blend_presets[0]=bm_normal;
blend_presets[1]=bm_add;
maxblendPreset=2;

object_presets[0]=o_2d_ladder;
maxObject=1;

maxCode=2;

maxLight=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mrx=mouse_x/64;
mry=mouse_y/64;
mtx=mx+real(int(mrx));
mty=my+real(int(mry));
ax=mx*64+mouse_x;
ay=my*64+mouse_y;
ox=mouse_x-(real(int(mrx))*64);
oy=mouse_y-(real(int(mry))*64);

if ( keyDelay &gt; 0 ) keyDelay-=1/room_speed;

var f,k;
f=int(mrx);
k=string_split(f,".");
if ( k &lt; 2 ) mtox=0; else mtox=real("0."+global.script_string_split[1]);
f=int(mry);
k=string_split(f,".");
if ( k &lt; 2 ) mtoy=0; else mtoy=real("0."+global.script_string_split[1]);

if ( mouse_check_button(mb_left) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
  global.map[layer_,v]=sub;
  global.mcode[layer_,v]=drawCode;
  global.mcolor[layer_,v]=drawColor;
  global.malpha[layer_,v]=drawAlpha;
  global.mblend[layer_,v]=blend_presets[blendPreset];
  global.mtileset[layer_,v]=drawTileset;
 }
 if ( autoRotateSub ) {
  sub+=1;
  if ( sub &gt; sprite_get_number(tileset_presets[drawTileset]) ) sub=0;
 }
}

if ( mouse_check_button(mb_right) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) global.map[layer_,v]=-1;
}

if ( mouse_check_button_released(mb_middle) ) {
 sub+=1;
 if ( sub &gt; sprite_get_number(tileset_presets[drawTileset]) ) sub=0;
}

// Select object from presets
if ( keyDelay &lt;= 0 and keyboard_check(ord('I')) ) {
 drawObject+=1;
 if ( drawObject &gt;= maxObject ) drawObject=0;
 keyDelay=0.5;
}

// Remove objects on tile
if ( keyDelay &lt;= 0 and keyboard_check(ord('U')) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
  global.mobj[layer_,v]=-1;
  global.mobj2[layer_,v]=-1;
 }
 keyDelay=0.5;
}

// Place object
if ( keyDelay &lt;= 0 and keyboard_check(ord('P')) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) global.mobj[layer_,v]=drawObject;
 keyDelay=1.0;
}

// Place object
if ( keyDelay &lt;= 0 and keyboard_check(ord('Y')) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) global.mobj2[layer_,v]=drawObject;
 keyDelay=1.0;
}

if ( keyDelay &lt;= 0 and keyboard_check(ord('Z')) ) {
 drawTween+=1;
 if ( drawTween &gt;= maxTween ) drawTween=0;
 keyDelay=0.5;
}

// Select light from presets
if ( keyDelay &lt;= 0 and keyboard_check(ord('V')) ) {
 drawLight+=1;
 if ( drawLight &gt;= maxLight ) drawLight=0;
 keyDelay=0.5;
}

// Add light
if ( keyDelay &lt;= 0 and keyboard_check(ord('J')) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
  global.mlight[layer_,v]=drawLight;
  global.mlightc[layer_,v]=drawColor;
 }
 keyDelay=1.0;
}
// Remove light
if ( keyboard_check(ord('K')) ) {
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) global.mlight[layer_,v]=-1;
}

// Place:
// Precisely located light
if ( keyDelay &lt;= 0.0 and keyboard_check(vk_insert) ) {
 global.map_light[global.map_lights]=drawLight;
 global.map_light_x[global.map_lights]=ax;
 global.map_light_y[global.map_lights]=ay;
 global.map_light_color[global.map_lights]=drawColor;
 global.map_light_tween[global.map_lights]=drawTween;
 global.map_lights+=1;
 keyDelay=1.0;
}
// Precisely located object
if ( keyDelay &lt;= 0.0 and keyboard_check(vk_home) ) {
 global.map_object[global.map_objects]=drawObject;
 global.map_object_x[global.map_objects]=ax;
 global.map_object_y[global.map_objects]=ay;
 global.map_objects+=1;
 keyDelay=1.0;
}


// Remove last:
// Precisely located light
if ( keyDelay &lt;= 0.0 and keyboard_check(vk_delete) ) {
 if ( global.map_lights &gt; 0 ) global.map_lights-=1;
 keyDelay=1.0;
}
// Precisely located object
if ( keyDelay &lt;= 0.0 and keyboard_check(vk_end) ) {
 if ( global.map_objects &gt; 0 ) global.map_objects-=1;
 keyDelay=1.0;
}



// Change Tileset
if ( keyDelay &lt;= 0 and keyboard_check(ord('T')) ) {
 drawTileset+=1;
 if ( drawTileset &gt;= maxTilesets ) drawTileset=0;
 if ( sub &gt; sprite_get_number(tileset_presets[drawTileset]) ) sub=0;
 keyDelay=0.5;
}

// Change Map Code
if ( keyDelay &lt;= 0 and keyboard_check(ord('S')) ) {
 drawCode+=1;
 if ( drawCode &gt;= maxCode ) drawCode=0;
 keyDelay=0.5;
}

if ( keyboard_check(vk_lcontrol) ) {
var r,g,b;
if ( keyboard_check(ord('A')) ) {
 if ( drawAlpha &lt; 1.0 ) drawAlpha+=0.01;
} else
if ( keyboard_check(ord('E')) ) {
 blendPreset+=1;
 if ( blendPreset&gt;=maxblendPreset ) blendPreset=0;
 drawBlend=blend_presets[blendPreset];
} else
if ( keyboard_check(ord('R')) ) {
 r=red(drawColor);
 if ( r &lt; 255.0 ) {
  drawColor=make_color_rgb(r+1,green(drawColor),blue(drawColor));
 }
} else
if ( keyboard_check(ord('G')) ) {
 g=green(drawColor);
 if ( g &lt; 255.0 ) {
  drawColor=make_color_rgb(red(drawColor),g+1,blue(drawColor));
 }
} else
if ( keyboard_check(ord('B')) ) {
 b=blue(drawColor);
 if ( b &lt; 255.0 ) {
  drawColor=make_color_rgb(red(drawColor),green(drawColor),b+1);
 }
}
} else
if ( keyboard_check(vk_lshift) ) {
var r,g,b;
if ( keyboard_check(ord('A')) ) {
 if ( drawAlpha &gt; 0.0 ) drawAlpha-=0.01;
} else
if ( keyboard_check(ord('E')) ) {
 blendPreset-=1;
 if ( blendPreset&lt;0 ) blendPreset=maxblendPreset-1;
 drawBlend=blend_presets[blendPreset];
} else
if ( keyboard_check(ord('R')) ) {
 r=red(drawColor);
 if ( r &gt; 0.0 ) {
  drawColor=make_color_rgb(r-1,green(drawColor),blue(drawColor));
 }
} else
if ( keyboard_check(ord('G')) ) {
 g=green(drawColor);
 if ( g &gt; 0.0 ) {
  drawColor=make_color_rgb(red(drawColor),g-1,blue(drawColor));
 }
} else
if ( keyboard_check(ord('B')) ) {
 b=blue(drawColor);
 if ( b &gt; 0.0 ) {
  drawColor=make_color_rgb(red(drawColor),green(drawColor),b-1);
 }
}
} else {
var r,g,b;
if ( keyboard_check(ord('R')) ) {
 drawColor=make_color_rgb(0,green(drawColor),blue(drawColor));
} else
if ( keyboard_check(ord('G')) ) {
 drawColor=make_color_rgb(red(drawColor),0,blue(drawColor));
} else
if ( keyboard_check(ord('B')) ) {
 drawColor=make_color_rgb(red(drawColor),green(drawColor),0);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>autoRotateSub=!autoRotateSub;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onionMode=!onionMode;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sub &gt; 0 ) sub-=1;
else sub=sprite_get_number(tileset_presets[drawTileset]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sub+=1;
if ( sub &gt; sprite_get_number(tileset_presets[drawTileset]) ) sub=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var l,i,j,rw,rh;
rw=room_width/64+1;
rh=room_height/64+1;

if ( onionMode ) {
 for ( l=0; l&lt;10; l++ ) {
  for ( i=mx; i&lt;mx+rw; i++ ) {
   for ( j=my; j&lt;my+rh ;j++ ) {
    if ( WITHIN(i,j,0,0,global.map_w[l],global.map_h[l]) ) {
     var v,s,a,b,c,a,m,t;
     v=i+j*global.map_w[l];
     s= global.map[l,v];
     b= blend_presets[global.mblend[l,v]];
     c= global.mcolor[l,v];
     a= global.malpha[l,v];
     t= global.mtileset[l,v];
     if ( s &gt;= 0 ) {
      draw_set_blend_mode(b);
      if ( l == layer_ ) 
      draw_sprite_ext(tileset_presets[t],s,(i-mx)*64,(j-my)*64,1,1,0,c,a);
      else 
      draw_sprite_ext(tileset_presets[t],s,(i-mx)*64,(j-my)*64,1,1,0,c,a/10);
     }
     if ( global.mlight[l,v] &gt;= 0 ) {
      draw_set_color(global.mlightc[l,v]);
      draw_rectangle((i-mx)*64-5,(j-my)*64-5,(i-mx)*64+5,(j-my)*64+5,false);
     }
     m= global.mcode[l,v];
     if ( l==layer_ and m == 1 ) {
      draw_set_color(c_orange);
      draw_text((i-mx)*64-20,(j-my)*64,"SOLID");
     }
    }
   }
  }
 }
} else
if ( not exclusiveMode ) {
 for ( l=0; l&lt;10; l++ ) {
  for ( i=mx; i&lt;mx+rw; i++ ) {
   for ( j=my; j&lt;my+rh ;j++ ) {
    if ( WITHIN(i,j,0,0,global.map_w[l],global.map_h[l]) ) {
     var v,s,a,b,c,a,m,t;
     v=i+j*global.map_w[l];
     s= global.map[l,v];
     b= blend_presets[global.mblend[l,v]];
     c= global.mcolor[l,v];
     a= global.malpha[l,v];
     t= global.mtileset[l,v];
     if ( s &gt;= 0 ) {
      draw_set_blend_mode(b);
      draw_sprite_ext(tileset_presets[t],s,(i-mx)*64,(j-my)*64,1,1,0,c,a);
     }
     if ( global.mlight[l,v] &gt;= 0 ) {
      draw_set_color(global.mlightc[l,v]);
      draw_rectangle((i-mx)*64-5,(j-my)*64-5,(i-mx)*64+5,(j-my)*64+5,false);
     }
     m= global.mcode[l,v];
     if ( m == 1 ) {
      draw_set_color(c_orange);
      draw_text((i-mx)*64-20,(j-my)*64+8,"SOLID");
     }
    }
   }
  }
 }
} else {
 for (i=mx;i&lt;mx+rw;i++) {
  for (j=my;j&lt;my+rh;j++) {
   if ( WITHIN(i,j,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
    var v,s,a,b,c,a,m,t;
    v=i+j*global.map_w[layer_];
    s= global.map[layer_,v];
    b= global.mblend[layer_,v];
    c= global.mcolor[layer_,v];
    a= global.malpha[layer_,v];
    t= global.mtileset[layer_,v];
    if ( s &gt;= 0 ) {
     draw_set_blend_mode(b);
     draw_sprite_ext(tileset_presets[t],s,(i-mx)*64,(j-my)*64,1,1,0,c,a);
    }
    if ( global.mlight[layer_,v] &gt;= 0 ) {
     draw_set_color(global.mlightc[layer_,v]);
     draw_rectangle((i-mx)*64-5,(j-my)*64-5,(i-mx)*64+5,(j-my)*64+5,false);
    }
    m= global.mcode[layer_,v];
    if ( m == 1 ) {
     draw_set_color(c_orange);
     draw_text((i-mx)*64-20,(j-my)*64,"SOLID");
     draw_set_color(c_white);
    }
   }
  }
 }
}

draw_set_blend_mode(bm_normal);
draw_set_alpha(0.8);

// Draw Objects
for ( i=0; i&lt;global.map_objects; i++ ) {
 var obx,oby;
 draw_set_color(c_yellow);
 obx=global.map_object_x[i]-(mx*64);
 oby=global.map_object_y[i]-(my*64);
 draw_rectangle(obx,oby,obx+16,oby+16,false);
 draw_set_color(c_black);
 draw_text(obx+2,oby+2,"O");
 draw_set_color(c_yellow);
 draw_text(obx+16,oby+2,int(global.map_object[i]));
}

// Draw Lights
for ( i=0; i&lt;global.map_lights; i++ ) {
 var obx,oby;
 draw_set_color(global.map_light_color[i]);
 obx=global.map_light_x[i]-(mx*64);
 oby=global.map_light_y[i]-(my*64);
 draw_rectangle(obx,oby,obx+16,oby+16,false);
 draw_set_color(c_white);
 draw_text(obx+2,oby+2,"X"+int(global.map_light[i]));
}

draw_set_blend_mode(bm_normal);
draw_set_alpha(1.0);

draw_set_color(c_blue);
draw_set_alpha(0.5);
draw_rectangle(0,0,room_width,32,false);
draw_set_alpha(1.0);

draw_set_color(c_lime);
draw_text(5+150,5,"Mtx,Mty: "+int(mtx)+","+int(mty));
draw_text(5+150+150,5,int(mouse_x)+","+int(mouse_y));
draw_text(5+150+150+150,5,"Mx,my: "+int(mx)+","+int(my));
draw_text(5+150+150+150+150,5,"WxH: "+int(global.map_w[0])+","+int(global.map_h[0]));
draw_text(5+150+150+150+150+150,5,
 " layer_: "+int(layer_)
+" Blend: "+int(blendPreset)
+" Alpha: "+float(drawAlpha)
+" Tiles: "+int(drawTileset)
+" Code: "+int(drawCode)
+" L: "+int(drawLight)
+" O: "+int(drawObject)
);
draw_set_color(drawColor);
draw_rectangle(5,5,24,24,false);
if ( onionMode ) draw_text(32,5,"onion");
if ( exclusiveMode ) draw_text(32,5,"x-mode");

draw_set_color(c_red);
draw_rectangle((mtx-mx)*64-32,(mty-my)*64-32,(mtx-mx)*64+32,(mty-my)*64+32,true);

draw_sprite_ext(tileset_presets[drawTileset],sub,room_width-64,32,1,1,0,drawColor,1);

{
 var v;
 v=mtx+mty*global.map_w[layer_];
 if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
  draw_set_color(c_lime);
  draw_text(64,room_height-64,
    "sub: "
   +int(global.map[layer_,v])+", code:"
   +int(global.mcode[layer_,v])+" alpha: "
   +float(global.malpha[layer_,v])+" blend: "
   +int(global.mblend[layer_,v])+" tiles: "
   +int(global.mtileset[layer_,v])+" obj: "
   +int(global.mobj[layer_,v])+" obj2: "
   +int(global.mobj2[layer_,v])+" L: "
   +int(global.mlight[layer_,v])
  );
  draw_set_color(global.mcolor[layer_,v]);
  draw_rectangle(5,room_height-64,24,room_height-40,false);
  draw_set_color(global.mlightc[layer_,v]);
  draw_rectangle(5+24,room_height-64,24+24,room_height-40,false);
  draw_set_color(c_white);
 }
}

if ( keyboard_check(ord('W')) ) {
 drawColor=c_white;
}

if ( keyboard_check(ord('H')) ) {
 draw_set_alpha(0.5);
 draw_set_color(c_black);
 draw_rectangle(0,room_height/2-8,room_width,room_height,false);
 draw_set_alpha(1.0);
 draw_set_color(c_white);
 draw_text(5,room_height/2,
 "Left(draw), Arrows(move), Right(erase), Middle(Tile), (H)elp#"
+"Modify pen: (S)Code (T)ileset (M)Object (V)Light (Z)Tween#"
+" (*)grab#"
+"(shift/ctrl)+ (R)(G)(B),(x)mode (o)nion-mode bl(E)nd (A)lpha (W)=white#"
+"0,1,2..9 active layer_#"
+"(J) Place CBNA Light with Draw Color, (K) remove light from tile#"
+"(I) Change Object, (U) (remove all objects from this tile), (Y)(P)lace object#"
+"(INS) Place precise light (DEL) Remove it#"
+"(HOME) Place precise object of current type (END) Remove it#"
+"-- and (H) help" );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var filename;
filename=get_string("Enter filename:","filename.txt");

var oneday, twelvehours, onehour, oneminute, onesecond, onemillisec;

oneday = 1;
twelvehours = oneday/2;
onehour = twelvehours/12;
oneminute = onehour/60;
onesecond = oneminute/60;
onemillisec = onesecond/1000;

var ts,te;

ts = current_time;
map_from_bin(filename);
te = current_time;
show_message("The process took " + string((te-ts) / 1000) + " seconds");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var filename;
filename=get_string("Enter filename:","filename.txt");

var oneday, twelvehours, onehour, oneminute, onesecond, onemillisec;

oneday = 1;
twelvehours = oneday/2;
onehour = twelvehours/12;
oneminute = onehour/60;
onesecond = oneminute/60;
onemillisec = onesecond/1000;

var ts,te;

ts = current_time;
map_to_bin(filename);
te = current_time;
show_message("The process took " + string((te-ts) / 1000) + " seconds");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var r,g,b;
if ( keyboard_check(ord('A')) ) {
 if ( drawAlpha &gt; 0.0 ) drawAlpha-=0.01;
} else
if ( keyboard_check(ord('E')) ) {
 blendPreset-=1;
 if ( blendPreset&lt;0 ) blendPreset=maxblendPreset-1;
 drawBlend=blend_presets[blendPreset];
} else
if ( keyboard_check(ord('R')) ) {
 r=red(drawColor);
 if ( r &gt; 0.0 ) {
  drawColor=make_color_rgb(r-1,green(drawColor),blue(drawColor));
 }
} else
if ( keyboard_check(ord('G')) ) {
 g=green(drawColor);
 if ( g &gt; 0.0 ) {
  drawColor=make_color_rgb(red(drawColor),g-1,blue(drawColor));
 }
} else
if ( keyboard_check(ord('B')) ) {
 b=blue(drawColor);
 if ( b &gt; 0.0 ) {
  drawColor=make_color_rgb(red(drawColor),green(drawColor),b-1);
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var r,g,b;
if ( keyboard_check(ord('A')) ) {
 if ( drawAlpha &lt; 1.0 ) drawAlpha+=0.01;
} else
if ( keyboard_check(ord('E')) ) {
 blendPreset+=1;
 if ( blendPreset&gt;=maxblendPreset ) blendPreset=0;
 drawBlend=blend_presets[blendPreset];
} else
if ( keyboard_check(ord('R')) ) {
 r=red(drawColor);
 if ( r &lt; 255.0 ) {
  drawColor=make_color_rgb(r+1,green(drawColor),blue(drawColor));
 }
} else
if ( keyboard_check(ord('G')) ) {
 g=green(drawColor);
 if ( g &lt; 255.0 ) {
  drawColor=make_color_rgb(red(drawColor),g+1,blue(drawColor));
 }
} else
if ( keyboard_check(ord('B')) ) {
 b=blue(drawColor);
 if ( b &lt; 255.0 ) {
  drawColor=make_color_rgb(red(drawColor),green(drawColor),b+1);
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="106">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var v;
v=mtx+mty*global.map_w[layer_];
if ( WITHIN(mtx,mty,0,0,global.map_w[layer_],global.map_h[layer_]) ) {
 drawColor=global.mcolor[layer_,v];
 drawCode=global.mcode[layer_,v];
 drawAlpha=global.malpha[layer_,v];
 drawBlend=global.mblend[layer_,v];
 drawTileset=global.mtileset[layer_,v];
 sub=global.map[layer_,v];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exclusiveMode=!exclusiveMode;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawColor=color_fuzzy(0,255,0,255,0,255);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer_=9;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// move map down
my+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// move map right
mx+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// move map up
my-=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// move map left
mx-=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sub-=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sub+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
